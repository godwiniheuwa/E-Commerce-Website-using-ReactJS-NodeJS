name: CI/CD Pipeline for MERN Application

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Build Backend Docker Image
      - name: Build Backend Docker Image
        run: |
          docker build -f ./backend/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/mern-backend:latest .

      # Step 3: Build Frontend Docker Image
      - name: Build Frontend Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/mern-frontend:latest -f ./frontend/Dockerfile ./frontend

      # Step 4: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Step 5: Push Backend Docker Image
      - name: Push Backend Docker Image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mern-backend:latest

      # Step 6: Push Frontend Docker Image
      - name: Push Frontend Docker Image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mern-frontend:latest

  security_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Setup Trivy Cache
      - name: Setup Trivy Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db
          restore-keys: |
            ${{ runner.os }}-trivy-db

      # Step 2: Security Scanning with Trivy for Backend Source
      - name: Security Scanning with Trivy (Backend Source)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          path: './backend'
          format: 'json'
          output: './trivy-backend-source-report.json'
          severity: 'HIGH,CRITICAL'
          args: '--scanners vuln'
        continue-on-error: true

      # Step 3: Security Scanning with Trivy for Frontend Source
      - name: Security Scanning with Trivy (Frontend Source)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          path: './frontend'
          format: 'json'
          output: './trivy-frontend-source-report.json'
          severity: 'HIGH,CRITICAL'
          args: '--scanners vuln'
        continue-on-error: true

      # Step 4: Security Scanning with Trivy for Backend Docker Image
      - name: Security Scanning with Trivy (Backend Image)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/mern-backend:latest
          format: 'json'
          output: './trivy-backend-image-report.json'
          severity: 'HIGH,CRITICAL'
        continue-on-error: true

      # Step 5: Security Scanning with Trivy for Frontend Docker Image
      - name: Security Scanning with Trivy (Frontend Image)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/mern-frontend:latest
          format: 'json'
          output: './trivy-frontend-image-report.json'
          severity: 'HIGH,CRITICAL'
        continue-on-error: true

      # Step 6: Upload Security Reports as Artifacts
      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v3
        with:
          name: trivy-reports
          path: |
            ./trivy-backend-source-report.json
            ./trivy-frontend-source-report.json
            ./trivy-backend-image-report.json
            ./trivy-frontend-image-report.json

  sonarqube_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: SonarCloud Scan
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=godwin-project_ecommerce
            -Dsonar.organization=godwin-project
            -Dsonar.sources=./
            -Dsonar.exclusions=**/node_modules/**
            -Dsonar.host.url=https://sonarcloud.io

  deploy:
    runs-on: ubuntu-latest
    needs: [build, security_scan, sonarqube_scan]
    steps:
      # Step 1: Checkout code (again for deployment phase)
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials using v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Replace with your AWS region

    #   # Step 3: Update kubeconfig for EKS (if applicable)
    #   - name: Update kubeconfig for EKS
    #     run: |
    #       aws eks update-kubeconfig --name your-cluster-name --region us-east-1

    #   # Step 4: Apply Kubernetes manifests to deploy (if applicable)
    #   - name: Deploy to EKS
    #     run: |
    #       kubectl apply -f k8s/aws-secret.yaml
    #       kubectl apply -f k8s/backend-deployment.yaml
    #       kubectl apply -f k8s/backend-service.yaml
    #       kubectl apply -f k8s/frontend-deployment.yaml
    #       kubectl apply -f k8s/frontend-service.yaml
